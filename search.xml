<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[PCB2018部分Writeup]]></title>
    <url>%2F2018%2F12%2F05%2FPCB2018%E9%83%A8%E5%88%86Writeup%2F</url>
    <content type="text"><![CDATA[MISChack1t(复现队里大佬的) 题目给了完整的VM虚拟机压缩包，文件都经过了加密，但给出了密码bibinb 用密码登陆，发现无法直接登陆系统，还需要账号密码，简单的root等弱口令失败告终；在进入系统时进入GRUB进行恢复密码，发现根本没这个选项，一下子没了什么思路，开始面向搜索引擎 一番操作后大佬找这个破解VMX配置 可以通过配置CD-ROM的系统来加载这个文件 首先解密一下这个”Ubuntu 64-bit.vmx”,然后输入密码bibinb 发现报错 Error: File Ubuntu 64-bit.vmx is not a valid VMX file 原来是main.py脚本有瑕疵(果然我是做不出来的，因为遇到这个我是直接放弃的) 把N改成n就行,然后得到1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192Password:guestos = "ubuntu-64"virtualhw.version = "13"config.version = "8"numvcpus = "2"cpuid.coresPerSocket = "1"memsize = "2048"pciBridge0.present = "TRUE"pciBridge4.present = "TRUE"pciBridge4.virtualDev = "pcieRootPort"pciBridge4.functions = "8"pciBridge5.present = "TRUE"pciBridge5.virtualDev = "pcieRootPort"pciBridge5.functions = "8"pciBridge6.present = "TRUE"pciBridge6.virtualDev = "pcieRootPort"pciBridge6.functions = "8"pciBridge7.present = "TRUE"pciBridge7.virtualDev = "pcieRootPort"pciBridge7.functions = "8"vmci0.present = "TRUE"mks.enable3d = "true"scsi0:0.present = "TRUE"scsi0:0.deviceType = "disk"scsi0:0.fileName = "Ubuntu 64-bit-disk1.vmdk"scsi0:0.mode = "persistent"scsi0.virtualDev = "lsilogic"scsi0.present = "TRUE"sata0.present = "TRUE"vmci0.unrestricted = "false"vcpu.hotadd = "true"mem.hotadd = "true"powerType.powerOff = "soft"powerType.reset = "soft"powerType.suspend = "soft"toolscripts.afterpoweron = "true"toolscripts.afterresume = "true"toolscripts.beforepoweroff = "true"toolscripts.beforesuspend = "true"tools.syncTime = "false"nvram = "Ubuntu 64-bit-file1.nvram"virtualHW.productCompatibility = "hosted"extendedConfigFile = "Ubuntu 64-bit.vmxf"dataFileKey = "type=key:cipher=AES-256:key=NHhuUIeIg1lhhNi7CvHXZysR+lrMxsNhJl7DO0SIuZ4%3d"cryptoState = "encrypted"isolation.tools.copy.disable = "TRUE"isolation.tools.dnd.disable = "TRUE"isolation.tools.paste.disable = "TRUE"policy.vm.mvmtid = "52 b5 65 b9 89 e2 54 bf-e2 ee e6 99 1f 9d 2d 29"rollingTier0.uid = "1"rollingTier0.interval = "86400"rollingTier0.maximum = "1"rollingTier0.clientFlags = "8"rollingTier0.displayName = "自动保护快照"rollingTier1.uid = "2"rollingTier1.interval = "604800"rollingTier1.baseTier = "1"rollingTier1.baseTierInterval = "7"rollingTier1.maximum = "1"rollingTier1.clientFlags = "8"rollingTier1.displayName = "自动保护快照"rollingTier2.uid = "3"rollingTier2.interval = "2419200"rollingTier2.baseTier = "1"rollingTier2.baseTierInterval = "28"rollingTier2.maximum = "1"rollingTier2.clientFlags = "8"rollingTier2.displayName = "自动保护快照"snapshot.numRollingTiers = "3"floppy0.present = "FALSE"uuid.bios = "56 4d 93 ac e2 84 54 3c-79 fd be 1f 62 8c 5d 67"uuid.location = "56 4d 93 ac e2 84 54 3c-79 fd be 1f 62 8c 5d 67"migrate.hostlog = ".\Ubuntu 64-bit-0dae80fb.hlog"scsi0:0.redo = ""pciBridge0.pciSlotNumber = "17"pciBridge4.pciSlotNumber = "21"pciBridge5.pciSlotNumber = "22"pciBridge6.pciSlotNumber = "23"pciBridge7.pciSlotNumber = "24"scsi0.pciSlotNumber = "16"vmci0.pciSlotNumber = "32"sata0.pciSlotNumber = "33"vmci0.id = "-119750326"monitor.phys_bits_used = "43"vmotion.checkpointFBSize = "4194304"vmotion.checkpointSVGAPrimarySize = "134217728"cleanShutdown = "TRUE"softPowerOff = "FALSE"svga.guestBackedPrimaryAware = "TRUE"rollingTier0.timeSincelast = "2008"rollingTier1.timeSincelast = "2008"rollingTier2.timeSincelast = "2008" ps:注意用py3,用py2总是报错~同时要把中文随便改成英文，不然编码错误 接下来就是配置CD-ROM了，看了一下自己的kali的vmx配置，主要多了如下 123sata0:0.deviceType = "cdrom-image"sata0:0.fileName = "D:\tongyongPE\kali-linux-2017.2-amd64.iso"sata0:0.present = "TRUE" 把它加到解密出来的vmx文件，然后再用bibinb密码加密回去 python3 main.py -e -D “Ubuntu 64-bit” -p bibinb dec.vmx myenc.mvx 将’myenc.mvx’替换掉原来的’Ubuntu 64-bit.vmx’ 在打开，发现 进入系统的过程按ESC进入Boot Menu,选择CD-ROM Drive,然后选择第一个 进入系统后看到一个20GB的磁盘,然后进去搜flag 4个文件放到一起打开 大佬太强~！！ Traffic_Light 题目给了一个红绿灯的gif文件 看了一下有1168帧 经过测试，最后发现绿灯为0，红灯为1，黄灯为空格 手动太累，还是写代码吧12345678910111213141516171819202122232425262728import os,sysimport hashlibdef GetFileMd5(filename): if not os.path.isfile(filename): return myhash = hashlib.md5() f = open(filename,'rb') while True: b = f.read(8096) if not b : break myhash.update(b) f.close() return myhash.hexdigest()flag = ""for i in range(0,1168): filepath="Traffic_Light/IMG%05d.bmp"%i if GetFileMd5(filepath)=="30a63c9d2ab0f27742a56ed5817723f8": #green flag += "0" elif GetFileMd5(filepath)=="fe8ab48b0f01daf1015607fdfa135621": #red flag += "1"print flagFLAG=''for i in range(len(flag)/8): FLAG+=chr(int(flag[i*8:i*8+8],2))print FLAG GreatWall 题目给一张长城的png，4M多，简单binwalk没发什么，考虑LSB 保存下来继续binwalk得到一张图片 长杠为1短杠为0,+为分隔符,好像只能手工写下来 What’s_this 题目拿到一张图片What’s_this.jpg binwalk，foremost得到 打开word文档，找到隐藏信息(并没卵用) docx后缀改zip，找到一个”有用的文件”I_Love_You.emf 再看2-stage.what这个文件很奇怪，JPG头，PNG尾，并且和zip2.zip里面的2-stage字节大小相同，但crc32不同，估计将2-stage.what改为PNG头后进行明文攻击改为如下 然后改后缀为png能打开(并没什么卵用) 但是可以发现此时2-stage.png和zip2.zip里面的2-stage的CRC32相同，明文攻击得到zip2.zip密码为Hello_Hi 得到如下(感觉被戏耍~，一堆没用的信息) 一下子没了思路，滚去睡觉 后来官方提示cloacked-pixel，用这个工具对2-stage.png提取，密码为Hello_Hi python lsb.py extract 2-stage.png out Hello_Hi 友情链接 得到加密压缩包zip3.zip和zip4.zip zip3.zip用CRC32碰撞得出文本内容为girl同时也是zip4的密码 很遗憾得到fake flag 此时“有用的文件”作用就来了，发现I_Love_You.emf和zip4.zip字节相同，尝试异或两个文件 12345678910111213141516#coding=utf8f1=open("I_Love_You.emf","rb")text1=f1.read()f2=open("zip4.zip","rb")text2=f2.read()data=''for i in range(len(text1)): data+=chr(ord(text1[i])^ord(text2[i]))f3=open("flag.zip","wb")f3.write(data)f1.close()f2.close()f3.close() Get flag]]></content>
  </entry>
  <entry>
    <title><![CDATA[hxb2018部分writeup]]></title>
    <url>%2F2018%2F11%2F23%2Fhxb2018%E9%83%A8%E5%88%86writeup%2F</url>
    <content type="text"><![CDATA[MiscFlow 流量取证，这个流量包中隐藏着一些秘密，你能找出来吗？ 拿到一个pacp流量包打开,发现全是802.11协议的,是WALN无线报文，并且经过加密，先解密 上kali用aircrack-ng直接跑 之前师兄的几个字典都不行，后来发现kali自带的很不错 wireshark导入密钥 导入后发现内容多了许多,字符串搜索flag Disk 磁盘隐写，这个磁盘上隐藏着一些秘密，你能找出来吗？ 题目给了一个-flat.vmdk文件,-flat.vmdk文件,-flat.vmdk文件(坑死了，简单的题目复杂化~) 本菜鸟本着面向搜索引擎做题的方法，看到了这个重建虚拟机丢失的虚拟磁盘vmdk，然后各种配置esxi环境失败,到后面也没连上去哈哈 正常操作一下，发现360压缩能打开（其它压缩软件貌似打不开的，360NB；后来发现360压缩可以看到NTFS交换数据流隐写的,如下面的ADS） flag0-3.txt都发现flag is not here;are you kidding? 然后看到flag0-3.txt:ads,打开发现是不可打印字符 用winhex打开发现一串二进制数，把4个文件的二进制数连起来转为ascii即可 还是太菜了，自从护网杯那道内存取证，一直对取证题敬畏，谁会想到这道题这么简单~ Hidden Write 没有套路，很常规的隐写，注意看图片末尾 题目给了一张龙猫的图片，放进winhex看一下 发现3个IHDR和IEND，理论存在3张图片，但binwalk只能得到原图一张，发现后两张少了PNG头，补上89504E470D0A1A0A 成功binwalk出3张图片 在分离出的第二张图片LSB发现一部分flag 第一和第三张是盲水印(字节小是原图，大有水印) 盲水印脚本 在最原始原图未发现最后一部分flag WebXmeO 注册账号，模板注入 1&#123;&#123;''.__class__.__mro__.__getitem__(2).__subclasses__().pop(59).__init__.func_globals.linecache.os.popen('grep -r -n "hxb" /home').read()&#125;&#125; show得到flag,或者登陆账号admin密码admin,发现里面有大佬遗留下来的做题痕迹，直接show拿走flag23333 ReverseReplace 有壳，kali下upx -d去壳 将数据提取出来，附上大佬脚本 CryptoCommon Crypto 密码学是个exe？不高兴又是Re ida打开程序大概知道是AES加密，从==sub_140001000== 中也可以看到一些赋值，估计是密钥 对于密文，前半部分是AES加密，后半部分则是decode(‘hex’) 脚本附上1234567from Crypto.Cipher import AESkey = '\x1b\x2e\x35\x46\x58\x6e\x72\x86\x9b\xa7\xb5\xc8\xd9\xef\xff\x0c'text='8aeb45c62003ba52e46c9600b3699b8c30386334623434393136633963356136'ciphertext = text.decode('hex')decodesys = AES.new(key)print decodesys.decrypt(ciphertext)[:16] + ciphertext[-16:] + '&#125;'#hxb2018&#123;d9e801ec08c4b44916c9c5a6&#125; 大佬的详细WP 总结还是太菜了，比赛期间本菜鸡都依靠强大的队友瑟瑟发抖的划水，别的大佬都在日主办方服务器~]]></content>
  </entry>
  <entry>
    <title><![CDATA[用hexo搭建本地博客]]></title>
    <url>%2F2018%2F11%2F11%2F%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[为什么搭博客？还不是因为无聊，学习是不可能的，这辈子都不可能学习；打LOL又嫌舍友太菜。开个玩笑，搭建自己的博客主要还是因为记录下自己的学习成长过程嘛，队里的大佬都有自己的Blog，自己也不好意思落下，有空的上传下自己的做题的writeup或复现还是不错的。 什么是Hexo？我不知道，网上教程多 Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 前提环境 node.js Git ps:我是在Windows下做的，linux用户只需(git自带) 12sudo apt-get install nodejssudo apt-get install npm 出现以下情况则安装成功 然后你就可以快乐地在一个新文件夹里右键Git Bash Here $ npm install -g hexo-cli 成功如下 建站 在想要建站的文件夹中(必须是空文件夹)输入如下 hexo init #初始化该文件夹,需要点时间 在文件夹发现多了些文件目录如下 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes _config.yml是网站配置信息详情 继续刚才的文件夹输入如下安装组件 npm install 生成静态文件和启动服务器12hexo ghexo s 浏览器输入http://localhost:4000/出现如下，恭喜博客初步建成 下面介绍一些常用hexo命令new $ hexo new [layout] 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 generate $ hexo generate 生成静态文件,等价于hexo g server $ hexo server 启动服务器等价于hexo s。默认情况下，访问网址为： http://localhost:4000/。 clean $ hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。 在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。 deploy hexo deploy 部署网站。等价于hexo d ps:用这个命令要先安装扩展 npm install hexo-deployer-git –save 部署到网站的一般流程123hexo cleanhexo ghexo d 不过此前一般在本地测试12hexo ghexo s]]></content>
  </entry>
  <entry>
    <title><![CDATA[MyFirst]]></title>
    <url>%2F2018%2F11%2F07%2FMyFirst%2F</url>
    <content type="text"><![CDATA[第一篇博客 Hello World！]]></content>
  </entry>
</search>
